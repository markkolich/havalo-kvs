<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- User details service -->

	<bean id="HavaloUserDetailsService"
        class="com.kolich.havalo.spring.security.HavaloUserDetailsService"
        depends-on="RepositoryManager">
        <property name="repositoryManager" ref="RepositoryManager" />
    </bean>
	
	<!-- Havalo API Authentication support -->
	
	<bean id="HavaloAuthenticationEntryPoint"
		class="com.kolich.havalo.spring.security.authentication.HavaloAuthenticationEntryPoint" />
	
	<bean id="HavaloAuthenticationFilter"
		class="com.kolich.havalo.spring.security.authentication.HavaloAuthenticationFilter">
		<property name="userDetailsService" ref="HavaloUserDetailsService" />
		<property name="authenticationEntryPoint" ref="HavaloAuthenticationEntryPoint" />
	</bean>

	<!-- Global security configuration -->
	
	<!-- <security:global-method-security pre-post-annotations="enabled" /> -->
	
	<security:authentication-manager alias="HavaloAuthenticationManager">
		<security:authentication-provider user-service-ref="HavaloUserDetailsService" />
	</security:authentication-manager>
	
	<security:http create-session="never" disable-url-rewriting="true" auto-config="false" use-expressions="true" entry-point-ref="HavaloAuthenticationEntryPoint">
	
		<!--		
			NOTE on the paths/patterns in this file: the patterns you see below
			are a bit odd given that the Spring Dispatcher Servlet listens under /api/*.
			And, the Spring Security Filter is also configured to catch on /api/*.
			However, the patterns below want to **start** with the path match used
			with the springSecurityFilterChain in web.xml.  So, if the url-pattern
			for the springSecurityFilterChain is "/api/*" then the patterns defined
			in this file have to start with "/api/".
		-->
	
		<!--
			A bit misleading, this filter isn't really a formal
			BASIC_AUTH_FILTER ("Basic Authentication Filter").  It is
			actually a custom auth filter that just happens to be using
			the BASIC_AUTH_FILTER position in the security filter chain.
		-->
		<security:custom-filter position="BASIC_AUTH_FILTER" ref="HavaloAuthenticationFilter" />		
		
		<security:intercept-url pattern="/api/authenticate**" access="hasRole('ROLE_USER')" />
		
		<security:intercept-url pattern="/api/repository" method="GET" access="hasRole('ROLE_USER')" />
		
		<!-- Only ADMIN level users can create new repositories. -->
		<security:intercept-url pattern="/api/repository/**" method="DELETE" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/api/repository" access="hasRole('ROLE_ADMIN')" />
		
		<security:intercept-url pattern="/api/object" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/api/object/**" access="hasRole('ROLE_USER')" />

        <security:intercept-url pattern="/**" access="permitAll" />
        
	</security:http>
	
</beans>